/* tslint:disable */
/* eslint-disable */
/**
 * WorkoutTracker
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExerciseUpdate,
  Training,
  TrainingCreate,
  TrainingDetails,
} from '../models/index';
import {
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  ExerciseUpdateFromJSON,
  ExerciseUpdateToJSON,
  TrainingFromJSON,
  TrainingToJSON,
  TrainingCreateFromJSON,
  TrainingCreateToJSON,
  TrainingDetailsFromJSON,
  TrainingDetailsToJSON,
} from '../models/index';

export interface CreateTrainingRequest {
  trainingCreate: TrainingCreate;
}

export interface DeleteExerciseFromTrainingRequest {
  trainingId: string;
  exerciseId: string;
}

export interface DeleteTrainingRequest {
  trainingId: string;
}

export interface GetTrainingByIdRequest {
  trainingId: string;
}

export interface GetTrainingsRequest {
  page?: number;
  size?: number;
}

export interface PatchTrainingExercisesRequest {
  trainingId: string;
  exerciseUpdate: Array<ExerciseUpdate>;
}

export interface UpdateTrainingRequest {
  trainingId: string;
  trainingCreate: TrainingCreate;
}

/**
 *
 */
export class TrainingApi extends runtime.BaseAPI {
  /**
   * Create training
   */
  async createTrainingRaw(
    requestParameters: CreateTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Training>> {
    if (
      requestParameters.trainingCreate === null ||
      requestParameters.trainingCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingCreate',
        'Required parameter requestParameters.trainingCreate was null or undefined when calling createTraining.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/training`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TrainingCreateToJSON(requestParameters.trainingCreate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrainingFromJSON(jsonValue),
    );
  }

  /**
   * Create training
   */
  async createTraining(
    requestParameters: CreateTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Training> {
    const response = await this.createTrainingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete an exercise from a training
   */
  async deleteExerciseFromTrainingRaw(
    requestParameters: DeleteExerciseFromTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trainingId === null ||
      requestParameters.trainingId === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingId',
        'Required parameter requestParameters.trainingId was null or undefined when calling deleteExerciseFromTraining.',
      );
    }

    if (
      requestParameters.exerciseId === null ||
      requestParameters.exerciseId === undefined
    ) {
      throw new runtime.RequiredError(
        'exerciseId',
        'Required parameter requestParameters.exerciseId was null or undefined when calling deleteExerciseFromTraining.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/training/{trainingId}/exercises/{exerciseId}`
          .replace(
            `{${'trainingId'}}`,
            encodeURIComponent(String(requestParameters.trainingId)),
          )
          .replace(
            `{${'exerciseId'}}`,
            encodeURIComponent(String(requestParameters.exerciseId)),
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an exercise from a training
   */
  async deleteExerciseFromTraining(
    requestParameters: DeleteExerciseFromTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteExerciseFromTrainingRaw(requestParameters, initOverrides);
  }

  /**
   * Delete training
   */
  async deleteTrainingRaw(
    requestParameters: DeleteTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trainingId === null ||
      requestParameters.trainingId === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingId',
        'Required parameter requestParameters.trainingId was null or undefined when calling deleteTraining.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/training/{trainingId}`.replace(
          `{${'trainingId'}}`,
          encodeURIComponent(String(requestParameters.trainingId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete training
   */
  async deleteTraining(
    requestParameters: DeleteTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteTrainingRaw(requestParameters, initOverrides);
  }

  /**
   * Get training by id
   */
  async getTrainingByIdRaw(
    requestParameters: GetTrainingByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TrainingDetails>> {
    if (
      requestParameters.trainingId === null ||
      requestParameters.trainingId === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingId',
        'Required parameter requestParameters.trainingId was null or undefined when calling getTrainingById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/training/{trainingId}`.replace(
          `{${'trainingId'}}`,
          encodeURIComponent(String(requestParameters.trainingId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrainingDetailsFromJSON(jsonValue),
    );
  }

  /**
   * Get training by id
   */
  async getTrainingById(
    requestParameters: GetTrainingByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TrainingDetails> {
    const response = await this.getTrainingByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all trainings
   */
  async getTrainingsRaw(
    requestParameters: GetTrainingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Training>>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/training`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TrainingFromJSON),
    );
  }

  /**
   * Get all trainings
   */
  async getTrainings(
    requestParameters: GetTrainingsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Training>> {
    const response = await this.getTrainingsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Patch exercises in training
   */
  async patchTrainingExercisesRaw(
    requestParameters: PatchTrainingExercisesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TrainingDetails>> {
    if (
      requestParameters.trainingId === null ||
      requestParameters.trainingId === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingId',
        'Required parameter requestParameters.trainingId was null or undefined when calling patchTrainingExercises.',
      );
    }

    if (
      requestParameters.exerciseUpdate === null ||
      requestParameters.exerciseUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        'exerciseUpdate',
        'Required parameter requestParameters.exerciseUpdate was null or undefined when calling patchTrainingExercises.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/training/{trainingId}/exercises`.replace(
          `{${'trainingId'}}`,
          encodeURIComponent(String(requestParameters.trainingId)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.exerciseUpdate.map(ExerciseUpdateToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrainingDetailsFromJSON(jsonValue),
    );
  }

  /**
   * Patch exercises in training
   */
  async patchTrainingExercises(
    requestParameters: PatchTrainingExercisesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TrainingDetails> {
    const response = await this.patchTrainingExercisesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update training
   */
  async updateTrainingRaw(
    requestParameters: UpdateTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TrainingDetails>> {
    if (
      requestParameters.trainingId === null ||
      requestParameters.trainingId === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingId',
        'Required parameter requestParameters.trainingId was null or undefined when calling updateTraining.',
      );
    }

    if (
      requestParameters.trainingCreate === null ||
      requestParameters.trainingCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'trainingCreate',
        'Required parameter requestParameters.trainingCreate was null or undefined when calling updateTraining.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/training/{trainingId}`.replace(
          `{${'trainingId'}}`,
          encodeURIComponent(String(requestParameters.trainingId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: TrainingCreateToJSON(requestParameters.trainingCreate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrainingDetailsFromJSON(jsonValue),
    );
  }

  /**
   * Update training
   */
  async updateTraining(
    requestParameters: UpdateTrainingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TrainingDetails> {
    const response = await this.updateTrainingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
