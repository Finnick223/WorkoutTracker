/* tslint:disable */
/* eslint-disable */
/**
 * WorkoutTracker
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Exercise,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExerciseFromJSON,
    ExerciseToJSON,
} from '../models/index';

export interface CreateExerciseRequest {
    exercise: Exercise;
}

export interface DeleteExerciseRequest {
    exerciseId: string;
}

export interface GetExerciseByIdRequest {
    exerciseId: string;
}

export interface GetExercisesRequest {
    page?: number;
    size?: number;
}

export interface UpdateExerciseRequest {
    exerciseId: string;
    exercise: Exercise;
}

/**
 * 
 */
export class ExerciseApi extends runtime.BaseAPI {

    /**
     * Create exercise
     */
    async createExerciseRaw(requestParameters: CreateExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exercise>> {
        if (requestParameters.exercise === null || requestParameters.exercise === undefined) {
            throw new runtime.RequiredError('exercise','Required parameter requestParameters.exercise was null or undefined when calling createExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExerciseToJSON(requestParameters.exercise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseFromJSON(jsonValue));
    }

    /**
     * Create exercise
     */
    async createExercise(requestParameters: CreateExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exercise> {
        const response = await this.createExerciseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete exercise
     */
    async deleteExerciseRaw(requestParameters: DeleteExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling deleteExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise/{exerciseId}`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete exercise
     */
    async deleteExercise(requestParameters: DeleteExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExerciseRaw(requestParameters, initOverrides);
    }

    /**
     * Get exercise by id
     */
    async getExerciseByIdRaw(requestParameters: GetExerciseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exercise>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling getExerciseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise/{exerciseId}`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseFromJSON(jsonValue));
    }

    /**
     * Get exercise by id
     */
    async getExerciseById(requestParameters: GetExerciseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exercise> {
        const response = await this.getExerciseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all exercises
     */
    async getExercisesRaw(requestParameters: GetExercisesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Exercise>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExerciseFromJSON));
    }

    /**
     * Get all exercises
     */
    async getExercises(requestParameters: GetExercisesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Exercise>> {
        const response = await this.getExercisesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update exercise
     */
    async updateExerciseRaw(requestParameters: UpdateExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exercise>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling updateExercise.');
        }

        if (requestParameters.exercise === null || requestParameters.exercise === undefined) {
            throw new runtime.RequiredError('exercise','Required parameter requestParameters.exercise was null or undefined when calling updateExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise/{exerciseId}`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExerciseToJSON(requestParameters.exercise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseFromJSON(jsonValue));
    }

    /**
     * Update exercise
     */
    async updateExercise(requestParameters: UpdateExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exercise> {
        const response = await this.updateExerciseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
